AZURE DEVOPS IS A SERVICE WHERE USER CAN PERFORM CI-CD-CT
CI: CONTINOUS INTEGRATION (BUILD)
CD: RELEASE/ PUBLISH/ DEPLOY
CT: CONTINOUS TESTING

TO CREATE A PROJECT WITH CUSTOM PROCESS TEMPLATES:
1. BASCIC: THE BACIC PROVIEDS THREE WORK ITEM TYPES TO PLAN AND TRACK WORK.
EPIC---> ISSUES---> TASK
EPIC: ENTIRE GOAL OF THE PROJECT
ISSUES: 
TASKS: ISSUES ARE DIVIDED INTO SMALL TASKS
2. SCRUM
THE SCRUM PROCESS SUPPORTS WORK ITEMS TO PLAN, TRACK WORK, TESTS, FEEDBACK AND CODE REVIEW. 
THESE ARTIFACTS ARE CREATED WHILE CREATING PROJECT USING THE SCRUM PROCESS. 

  PORTFOLIO BACKLOG                            TEST PLAN--->TEST SUITE ---->TEST CASES---->SHARED STEPS------>SHARED PARAMETERS
  EPIC--->FEATURES                                          
  _____________
PRODUCT BACKLOG --->PRODUCT BACKLOG ITEMS----->TASK

_________________
CONFIGURABLE
BUG------------> TASK

_______________
ISSURE TRACKING 
IMPEDEMENT: to avoid repeating issues (RCA : ROOT CAUSE ANALYSIS)

_________________
FEEDBACK
FEEDBACK REQUEST----->FEEDBACK RESPONSE

3. AGILE
4. CMMI

AZURE DEVOPS HAVE 5 TABS:
1. Boards
2. Repos
3. Pipelines
4. Testplan
5. Artifacts

INTERVIEW Q: CAN YOU EXPLAIN BRANCHING AND MERGING STRATAGEIES?
DEV BRANCH: LATEST DEVELOPED CODE
FEATURE BRANCH: NEW IMPLEMENTATIONS OR ADJUSTING CODE MODIFICATIONS (WRITE A NEW CODE OR MODIFY EXCISTING CODE)
RELEASE BRANCH: If one or two application need to be deployed to the production, those applications are moved from DEV branch to 
Release branch for deployment.
MASTER BRANCH: The deployed latest code from RELEASE is available in MASTER branch
HOTFIX BRANCH: Any bugs were found in real time. We will create a HOTFIX branch from master and then bug is fixed. After fixing the bug
the code is pushed back to the MASTER and DEV branch.

TO DEPLOY TASKS: 
DOWNLOAD THE LATEST CODE TO LOCAL FROM DEV FOR MODIFICATIONS
TO MOVE Future BRANCH CODE TO DEV BRANCH (PULL REQUEST IN AZURE REPOSITORY ) MERGE IN GITHUT
ONCE DEVELOPMENT IS COMPLETED FOR USER STORIES AND DEV BRANCH A NEW SEPERATE BRANCH RELEASE FROM DEV BRANCH IS CREATED.
ONCE THE USER STORIES ARE MOVED TO RELEASE BRANCH
EACH USER STORY WILL SEND REQUEST TO DEV BRANCH
THOSE REQUESTS ARE REVIEW BY REVIEWERS 
RELEASE BRANCH CONSISTS OF OLD CODE AND NEW CODE (USE : WHAT EVER THE CODE NEED TO BE DEPLOYED FOR PRODUCTION A SEPERATE BRANCH IS
CREATED
FROM DEV BRANCH WHICH IS RELEASE BRANCH)
RELEASE BRANCH CODE IS MOVED  TO DEV BRANCH---SIT----UAT----STAGE-----PRODUCTION

ONCE THE CODE TO DEPLOYED TO PRODUCTION THE CODE84/+ FROM RELEASE BRANCH IS MERGED TO MASTER BRANCH  WHICH MEANS THE CODE PRESENT 
IN PRODUCTION WILL
AVAILABLE IN MASTER BRANCH
MASTER BRANCH IS FOR BACK UP (USE: BACKUP OF PRODUCTION
HOTFIX: AFTER COMPLETING DEPLOYMENT TO PRODUCTION BRANCH, DEVELOPERS MAY FIND SOME BUGS. (USE: IF ANY BUGS ARE FOUND IN PRODUCTION,
A NEW BRANCH FROM MASTER BRANCH IS CREATED WHICH IS HOTFIX BRANCH)
THE LATEST CODE FROM MASTER BRANCH IS MERGED TO HOTFIX, BUGS ARE FIXED IN HOTFIX
DEV----SIT------STAGE------PRODUCTION
ONCE THE BUG IS FIXED IN HOTFIX THE HOTFIX BRANCH IS MERGED TO MASTER AND DEV BRANCHES TO UPDATE THE NEW CODE WITHOUT BUGS.



